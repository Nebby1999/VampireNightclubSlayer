using Microsoft.CSharp;
using System;
using System.Linq;
using System.Text;

namespace Nebula.Editor
{
    public class CodeGeneratorHelper : IDisposable
    {
        private CSharpCodeProvider _codeProvider;

        public string MakeAutoGeneratedCodeHeader(string toolName, string toolVersion, string sourceFileName = null)
        {
            return
                "//------------------------------------------------------------------------------\n"
                + "// <auto-generated>\n"
                + $"//     This code was auto-generated by {toolName}\n"
                + $"//     version {toolVersion}\n"
                + (string.IsNullOrEmpty(sourceFileName) ? "" : $"//     from {sourceFileName}\n")
                + "//\n"
                + "//     Changes to this file may cause incorrect behavior and will be lost if\n"
                + "//     the code is regenerated.\n"
                + "// </auto-generated>\n"
                + "//------------------------------------------------------------------------------\n";
        }

        public string MakeIdentifierConstant(string identifier)
        {
            var pascalCase = MakeIdentifierPascalCase(identifier);
            char[] chars = pascalCase.ToCharArray();
            StringBuilder builder = new StringBuilder();

            for(int i = 0; i < chars.Length; i++)
            {
                var chr = chars[i];

                if(char.IsUpper(chr))
                {
                    if(i != 0)
                    {
                        builder.Append("_");
                    }
                    builder.Append(chr);
                }
                else if(char.IsLower(chr))
                {
                    builder.Append(char.ToUpperInvariant(chr));
                }
                else
                {
                    builder.Append(chr);
                }
            }

            return builder.ToString();
        }
        public string MakeIdentifierPascalCase(string identifier)
        {
            return _codeProvider.CreateValidIdentifier(identifier).Replace(" ", "");
        }

        public string MakeIdentifierCamelCase(string identifier)
        {
            string camelCase = MakeIdentifierPascalCase(identifier);
            char[] chars = camelCase.ToCharArray();
            chars[0] = char.ToLowerInvariant(chars[0]);
            return new string(chars);
        }

        public void Dispose()
        {
            _codeProvider?.Dispose();
        }

        public CodeGeneratorHelper()
        {
            _codeProvider = new CSharpCodeProvider();
        }
    }
}