using System.CodeDom.Compiler;
using System.CodeDom;
using System.IO;
using System.Text;
using UnityEngine;
using UnityEditorInternal;

namespace Nebula.Editor.CodeGenerators
{
    public static class LayerIndexCodeGenerator
    {
        private static Writer WriteCode(CodeGeneratorHelper helper, bool is2D, NebulaSettings.LayerIndexData.CommonMask[] commonMask, string filePath, string _namespace)
        {
            Writer writer = new Writer
            {
                buffer = new StringBuilder()
            };

            var fileName = Path.GetFileNameWithoutExtension(filePath);
            var structName = helper.MakeIdentifierPascalCase(fileName);

            writer.WriteLine(helper.MakeAutoGeneratedCodeHeader("com.nebby1999.nebula:LayerIndexCodeGenerator", "1.0.0", "ProjectSettings"));

            writer.WriteVerbatim(
@"using System;
using UnityEngine;");

            if (!_namespace.IsNullOrWhiteSpace())
            {
                writer.WriteLine("namespace " + helper.MakeIdentifierPascalCase(_namespace));
                writer.BeginBlock();
            }

            writer.WriteLine("public struct " + structName);
            writer.BeginBlock();

            writer.WriteVerbatim(
@"private static uint _assignedLayerMask;
public static readonly LayerIndex invalidLayer = new LayerIndex(-1);");
            

            //project layers
            foreach(string layerName in InternalEditorUtility.layers)
            {
                var identifier = helper.MakeIdentifierCamelCase(layerName);
                if(identifier == "default")
                {
                    identifier += "Layer";
                }

                writer.WriteLine($"public static readonly LayerIndex {identifier} = GetLayerIndex(\"{layerName}\");");
            }

            writer.WriteVerbatim(
@"private static readonly LayerMask[] _collisionMasks = CalculateCollisionMasks();
public int intVal { get; private set; }
public LayerMask mask => (intVal >= 0) ? (1 << intVal) : intVal;
public LayerMask collisionMask => _collisionMasks[intVal];");


            //GetLayerIndex method
            writer.WriteVerbatim(
@"private static LayerIndex GetLayerIndex(string layerName)
{
    LayerIndex layerIndex = default;
    layerIndex.intVal = LayerMask.NameToLayer(layerName);
    LayerIndex result = layerIndex;
    _assignedLayerMask |= (uint)(1 << result.intVal);
    return result;
}");

            //Calculate collision masks method
            writer.WriteVerbatim(
@$"private static LayerMask[] CalculateCollisionMasks()
{{
    LayerMask[] array = new LayerMask[32];
    for(int i = 0; i < 32; i++)
    {{
        LayerMask layerMask = default(LayerMask);
        for(int j = 0; j < 32; j++)
        {{
            if(!{(is2D ? "Physics2D" : "Physics")}.GetIgnoreLayerCollision(i, j))
            {{
                layerMask = (int)layerMask | (1 << j);
            }}
        }}
        array[i] = layerMask;
    }}
    return array;
}}");

            //Constructor
            writer.WriteVerbatim(
@$"private {structName}(int val)
{{
    intVal = val;
}}");
            
            if (commonMask.Length > 0)
                WriteCommonMaskSelector(writer, helper, commonMask);
            writer.EndBlock(); //Class end

            if(!_namespace.IsNullOrWhiteSpace())
            {
                writer.EndBlock();
            }
            return writer;
        }

        private static void WriteCommonMaskSelector(Writer writer, CodeGeneratorHelper helper, NebulaSettings.LayerIndexData.CommonMask[] commonMasks)
        {
            writer.WriteLine("public static class CommonMasks");
            writer.BeginBlock();
            for(int i = 0; i < commonMasks.Length; i++)
            {
                var commonMask = commonMasks[i];
                var identifier = helper.MakeIdentifierCamelCase(commonMask.maskName);
                if (!commonMask.comment.IsNullOrWhiteSpace())
                {
                    writer.WriteLine($"private const string {identifier.ToUpperInvariant()}_COMMENT = @\"{commonMask.comment}\";");
                    writer.WriteLine("///<summary>");
                    writer.WriteLine("///" + commonMask.comment);
                    writer.WriteLine("///</summary>");
                }
                writer.WriteLine($"public static readonly LayerMask {identifier} = {(int)commonMask.layerMask};");
            }
            writer.EndBlock();
        }

        public static bool GenerateCode(NebulaSettings.LayerIndexData data)
        {
            using(CodeGeneratorHelper helper = new CodeGeneratorHelper())
            {
                var validationData = new CodeGeneratorValidator.ValidationData
                {
                    code = WriteCode(helper, data.is2D, data.commonMaskSelector, data.filePath, data.nameSpace),
                    desiredOutputPath = data.filePath
                };

                return CodeGeneratorValidator.Validate(validationData);
            }
        }
    }
}