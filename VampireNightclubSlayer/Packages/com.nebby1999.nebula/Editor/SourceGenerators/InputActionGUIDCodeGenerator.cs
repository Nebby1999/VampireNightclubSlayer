#if USE_INPUT_SYSTEM
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine.InputSystem;

namespace Nebula.Editor.CodeGenerators
{
    public static class InputActionGUIDCodeGenerator
    {
        private static Writer WriteCode(CodeGeneratorHelper helper, InputActionAsset inputActions, string filePath, string _namespace)
        {
            Writer writer = new Writer()
            {
                buffer = new StringBuilder()
            };

            var sourceAssetPath = AssetDatabase.GetAssetPath(inputActions);
            var fileName = Path.GetFileNameWithoutExtension(filePath);
            var className = helper.MakeIdentifierPascalCase(fileName);

            writer.WriteLine(helper.MakeAutoGeneratedCodeHeader("com.nebby1999.nebula:InputActionGUIDCodeGenerator", "1.0.0", sourceAssetPath));

            writer.WriteVerbatim(
@"using System;
using UnityEngine.InputSystem;");

            if(!_namespace.IsNullOrWhiteSpace())
            {
                writer.WriteLine("namespace " + helper.MakeIdentifierPascalCase(_namespace));
                writer.BeginBlock();
            }

            writer.WriteLine("public class " + className);
            writer.BeginBlock();

            var maps = inputActions.actionMaps;
            foreach (var map in maps)
            {
                var mapNameClass = helper.MakeIdentifierPascalCase(map.name);
                var mapNameField = helper.MakeIdentifierCamelCase(map.name);

                writer.WriteVerbatim(
@$"// {map.name}
public static readonly Guid {mapNameField}GUID = Guid.Parse(""{map.id}"");
public class {mapNameClass}");
                writer.BeginBlock();

                //Action in map
                foreach(var action in map.actions)
                {
                    var actionName = helper.MakeIdentifierCamelCase(action.name);
                    writer.WriteLine($"public static readonly Guid {actionName}GUID = Guid.Parse(\"{action.id}\");");
                }
                writer.WriteLine($"private {map.name}() {{}}");
                writer.EndBlock();
            }
            writer.WriteLine($"private {className}() {{}}");
            writer.EndBlock(); //Class end

            if (!_namespace.IsNullOrWhiteSpace())
            {
                writer.EndBlock();
            }

            return writer;
        }


        public static bool GenerateCode(NebulaSettings.InputActionGUIDData data)
        {
            using (CodeGeneratorHelper helper = new CodeGeneratorHelper())
            {
                var validationData = new CodeGeneratorValidator.ValidationData
                {
                    code = WriteCode(helper, data.inputActionAsset, data.filePath, data.nameSpace),
                    desiredOutputPath = data.filePath
                };

                return CodeGeneratorValidator.Validate(validationData);
            }
        }
    }
}
#endif