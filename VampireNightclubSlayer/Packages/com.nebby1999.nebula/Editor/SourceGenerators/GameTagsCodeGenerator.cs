using System.IO;
using System.Text;
using UnityEditorInternal;

namespace Nebula.Editor.CodeGenerators
{
    public static class GameTagsCodeGenerator
    {
        private static Writer WriteCode(CodeGeneratorHelper helper, string filePath, string _namespace)
        {
            Writer writer = new Writer()
            {
                buffer = new StringBuilder()
            };

            var fileName = Path.GetFileNameWithoutExtension(filePath);
            var className = helper.MakeIdentifierPascalCase(fileName);

            writer.WriteLine(helper.MakeAutoGeneratedCodeHeader("com.nebby1999.nebula:GameTagsCodeGenerator", "1.0.0", "ProjectSettings"));

            if(!_namespace.IsNullOrWhiteSpace())
            {
                writer.WriteLine($"namespace {_namespace}");
                writer.BeginBlock();
            }

            writer.WriteLine($"public struct {className}");

            writer.BeginBlock();
            string[] tags = InternalEditorUtility.tags;
            foreach(var tag in tags)
            {
                var identifier = helper.MakeIdentifierConstant(tag);
                writer.WriteLine($"public const string {identifier} = \"{tag}\";");
            }

            writer.EndBlock();
            if(!_namespace.IsNullOrWhiteSpace())
            {
                writer.EndBlock();
            }
            return writer;
        }

        public static bool GenerateCode(NebulaSettings.GameTagsData data)
        {
            using (CodeGeneratorHelper helper = new CodeGeneratorHelper())
            {
                var validationData = new CodeGeneratorValidator.ValidationData
                {
                    code = WriteCode(helper, data.filePath, data.nameSpace),
                    desiredOutputPath = data.filePath
                };

                return CodeGeneratorValidator.Validate(validationData);
            }
        }
    }
}